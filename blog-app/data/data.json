{
  "posts": [
    {
      "id": "3",
      "title": "React vs Vue: Which One to Choose?",
      "datetime": "2025-02-20T12:45:00Z",
      "body": "React and Vue.js are two of the most popular front-end JavaScript frameworks. React, backed by Facebook, focuses on a component-based architecture and is widely used in large-scale applications. Vue.js, on the other hand, is known for its simplicity and ease of integration. If you're working on a large, scalable project with a strong need for reusable components, React might be the better choice.\n\nVue.js provides a more beginner-friendly approach with an easy-to-understand template syntax. It allows for two-way data binding, making it easier to sync UI with state. React, however, uses a one-way data flow, ensuring better performance in larger applications. Both frameworks have strong communities, but React's ecosystem is larger, with extensive third-party libraries available.\n\nPerformance-wise, both frameworks are efficient, but React's virtual DOM optimizations provide slightly better rendering performance. Ultimately, the choice depends on the project requirements. Vue is great for small to medium-scale applications, while React excels in large enterprise-level applications."
    },
    {
      "id": "4",
      "title": "Building a To-Do App with React",
      "datetime": "2025-02-18T08:20:00Z",
      "body": "A to-do app is a great beginner project for learning React. Start by setting up a new React project and creating a `TodoList` component. Use the `useState` hook to manage the list of tasks. Each task should be represented as an object with properties like `id`, `text`, and `completed`. Render tasks dynamically using `map()`, and add features like marking tasks as done and deleting them.\n\nTo enhance the functionality, consider adding local storage support. By storing tasks in `localStorage`, users can retain their to-do list even after refreshing the page. Another useful feature is filtering tasks based on their completion status. You can implement tabs like 'All', 'Completed', and 'Pending' using conditional rendering.\n\nFor styling, use CSS modules or styled-components to create a visually appealing UI. If you're building a more advanced version, integrate a backend using Node.js and Express to save tasks in a database. This way, users can access their to-do lists from different devices."
    },
    {
      "id": "5",
      "title": "What is JSX in React?",
      "datetime": "2025-02-16T10:00:00Z",
      "body": "JSX (JavaScript XML) is a syntax extension for JavaScript that looks similar to HTML but works inside JavaScript files. It allows developers to write UI components using a syntax that closely resembles HTML, making it easier to visualize the UI structure. JSX is then compiled into regular JavaScript function calls by Babel before being rendered in the browser.\n\nOne of the main benefits of JSX is that it allows developers to mix HTML-like code with JavaScript logic, making UI development more intuitive. For example, you can dynamically insert values using curly braces: `<h1>{title}</h1>`. JSX also prevents cross-site scripting (XSS) attacks by escaping values automatically.\n\nWhile JSX is optional, most React developers prefer using it because it simplifies component creation. If you don't want to use JSX, you can write components using `React.createElement()`, but this can be more verbose and harder to read."
    },
    {
      "id": "6",
      "title": "State Management in React: When to Use Context API",
      "datetime": "2025-02-14T14:30:00Z",
      "body": "State management is a crucial aspect of any React application. While `useState` works well for local component state, managing global state can be challenging in large applications. The Context API provides a built-in way to share state across multiple components without passing props manually at every level.\n\nUsing the Context API, you can create a global state object and wrap your application with a provider. Components can then consume this context using the `useContext` hook. This makes data flow more manageable and reduces prop drilling.\n\nFor more complex applications, tools like Redux or Zustand can be used alongside the Context API. These tools provide better state management solutions, especially when dealing with large datasets or asynchronous data fetching."
    },
    {
      "id": "7",
      "title": "Custom Hooks in React ðŸš€",
      "datetime": "2025-02-28T07:11:18.394Z",
      "body": "A Custom Hook is a JavaScript function that starts with use and allows you to reuse stateful logic across multiple components.\n\nðŸ”¹ Why Use Custom Hooks?\nâœ… Reusability â€“ Avoid repeating logic in multiple components.\nâœ… Separation of Concerns â€“ Keep components cleaner by moving logic into hooks.\nâœ… Better Readability â€“ Improve code structure and maintainability.\n\nðŸ”¹ How to Create a Custom Hook?\nA Custom Hook is just a function that:\n\nStarts with use\nUses built-in Hooks like useState, useEffect, etc.\nReturns state and functions for reuse.\nðŸ’¡ Example 1: Custom Hook for Fetching Data\njsx\nCopy code\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n// Custom Hook: useFetch\nconst useFetch = (url) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(url);\n        setData(response.data);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error }; // Return values\n};\n\nexport default useFetch;\nðŸ›  Using useFetch in a Component\njsx\nCopy code\nimport useFetch from \"./useFetch\";\n\nconst Posts = () => {\n  const { data: posts, loading, error } = useFetch(\"https://jsonplaceholder.typicode.com/posts\");\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <div>\n      <h2>Blog Posts</h2>\n      {posts.map((post) => (\n        <p key={post.id}>{post.title}</p>\n      ))}\n    </div>\n  );\n};\n\nexport default Posts;\nðŸ’¡ Example 2: Custom Hook for Local Storage\nSave and retrieve values from localStorage easily.\n\njsx\nCopy code\nimport { useState, useEffect } from \"react\";\n\nconst useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    return JSON.parse(localStorage.getItem(key)) || initialValue;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n};\n\nexport default useLocalStorage;\nðŸ›  Using useLocalStorage in a Component\njsx\nCopy code\nimport useLocalStorage from \"./useLocalStorage\";\n\nconst Counter = () => {\n  const [count, setCount] = useLocalStorage(\"count\", 0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n};\n\nexport default Counter;\nðŸ”¹ When to Use Custom Hooks?\nUse them when you need to reuse logic across multiple components, such as:\n\nFetching data (useFetch)\nManaging local storage (useLocalStorage)\nHandling authentication\nTracking screen size\nDebouncing user input (e.g., search boxes)\nðŸ”¹ Key Points\nâœ… Custom Hooks must start with use (e.g., useFetch, useAuth).\nâœ… They use built-in hooks (useState, useEffect, etc.).\nâœ… They return values or functions to be used in components.\nâœ… They help keep components clean by moving logic into separate files.\n\nWould you like a custom hook for a specific use case? ðŸ˜ŠðŸš€"
    },
    {
      "id": "8",
      "title": "Gabru CCC f",
      "datetime": "2025-03-01T13:39:12.082Z",
      "body": "Kulveer Gabru\nupdateed.........."
    },
    {
      "id": "9",
      "title": "HellO New POst",
      "datetime": "2025-02-28T18:26:46.876Z",
      "body": "sdfjawenf\n"
    },
    {
      "id": "10",
      "title": "Test Data",
      "datetime": "2025-02-28T18:28:08.644Z",
      "body": "awhebkfwejkf"
    }
  ]
}